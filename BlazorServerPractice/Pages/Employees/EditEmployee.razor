@page "/editemployee/{EmployeeId}"

@using DataAccessLibrary.Repository
@using DataAccessLibrary.Models
@using BlazorServerPractice.Models

@inject IEmployeeRepository _db
@inject NavigationManager NavigationManager

@if (employee == null)
{
    <p><em>Loading...</em></p>
}
else
{
        <h3>Edit Employee</h3>

        <EditForm Model="@employee" OnValidSubmit="@EditEmployeeById">
            <DataAnnotationsValidator />
            <ValidationSummary />

        @if (!string.IsNullOrEmpty(error_message))
        {
            <div class="alert alert-danger" role="alert">
                @error_message
            </div>
        }


            <div class="form-group">
                <label for="employeeId">Employee ID</label>
                <InputNumber id="employeeId" @bind-Value="employee.EmployeeId" class="form-control" />
            </div>

            <div class="form-group">
                <label for="FirstName">First Name:</label>
                <InputText id="FirstName" class="form-control" @bind-Value="employee.FirstName" />
            </div>

            <div class="form-group">
                <label for="LastName">Last Name:</label>
                <InputText id="LastName" class="form-control" @bind-Value="employee.LastName" />
            </div>

            <div class="form-group">
                <label for="EmailAddress">Email Address:</label>
                <InputText id="EmailAddress" class="form-control" @bind-Value="employee.EmailAddress" />
            </div>

            <button type="submit" class="btn btn-primary mt-1">Save</button>
            <button @onclick="CancelDelete" class="btn btn-secondary mt-1">Cancel</button>
        </EditForm>
}



@code {

    [Parameter]
    public string EmployeeId { get; set; }
    private int EmployeeIdAsInt => int.Parse(EmployeeId);
    private EmployeeModel employee;
    private string error_message;


    protected override async Task OnInitializedAsync()
    {
        employee = await _db.GetEmployeeById(EmployeeIdAsInt);
    }

    private async Task EditEmployeeById()
    {
        try
        {
            await _db.EditEmployee(employee, EmployeeIdAsInt);
            NavigationManager.NavigateTo("/employees");
        }
        catch (InvalidOperationException ex)
        {
            error_message = ex.Message;
        }
    }

    private void CancelDelete()
    {
        NavigationManager.NavigateTo("/employees");
    }
}
